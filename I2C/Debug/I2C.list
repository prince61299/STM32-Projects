
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d08  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ea0  08000ea8  00010ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ea0  08000ea0  00010ea8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ea0  08000ea0  00010ea8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ea0  08000ea8  00010ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ea4  08000ea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000ea8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000ea8  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010ea8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006d9  00000000  00000000  00010ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001ab  00000000  00000000  000115b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00011760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  000117e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dbaf  00000000  00000000  00011858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009e4  00000000  00000000  0001f407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f5df  00000000  00000000  0001fdeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006f3ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000278  00000000  00000000  0006f41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e88 	.word	0x08000e88

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000e88 	.word	0x08000e88

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <adxl_init>:
void adx1_read_value(uint8_t reg);
void adx1_read_address(uint8_t reg);
void adx1_write(uint8_t reg, char value);
void adxl_init(void);

void adxl_init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	I2C1_Init();
 8000848:	f000 f9b2 	bl	8000bb0 <I2C1_Init>
	adx1_read_address(DEVID_R);
 800084c:	2000      	movs	r0, #0
 800084e:	f000 f823 	bl	8000898 <adx1_read_address>
	adx1_write(POWER_CTL_R, FOUR_G);
 8000852:	2101      	movs	r1, #1
 8000854:	202d      	movs	r0, #45	; 0x2d
 8000856:	f000 f80a 	bl	800086e <adx1_write>

	//RESET ALL THE BITS
	adx1_write(POWER_CTL_R, RESET);
 800085a:	2100      	movs	r1, #0
 800085c:	202d      	movs	r0, #45	; 0x2d
 800085e:	f000 f806 	bl	800086e <adx1_write>
	adx1_write(POWER_CTL_R, SET_MEASURE_B);
 8000862:	2108      	movs	r1, #8
 8000864:	202d      	movs	r0, #45	; 0x2d
 8000866:	f000 f802 	bl	800086e <adx1_write>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <adx1_write>:

void adx1_write(uint8_t reg, char value){
 800086e:	b580      	push	{r7, lr}
 8000870:	b084      	sub	sp, #16
 8000872:	af00      	add	r7, sp, #0
 8000874:	4603      	mov	r3, r0
 8000876:	460a      	mov	r2, r1
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	4613      	mov	r3, r2
 800087c:	71bb      	strb	r3, [r7, #6]
	char data[1];
	data[0]=value;
 800087e:	79bb      	ldrb	r3, [r7, #6]
 8000880:	733b      	strb	r3, [r7, #12]
	I2C1_BrustWrite(DEVICE_ADDR, reg, 1, &data);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	79f9      	ldrb	r1, [r7, #7]
 8000888:	2201      	movs	r2, #1
 800088a:	2053      	movs	r0, #83	; 0x53
 800088c:	f000 f828 	bl	80008e0 <I2C1_BrustWrite>
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <adx1_read_address>:

void adx1_read_address(uint8_t reg){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	I2C1_ByteRead(DEVICE_ADDR, reg, &data);
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <adx1_read_address+0x20>)
 80008a6:	4619      	mov	r1, r3
 80008a8:	2053      	movs	r0, #83	; 0x53
 80008aa:	f000 f90f 	bl	8000acc <I2C1_ByteRead>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000034 	.word	0x20000034

080008bc <adx1_read_value>:

void adx1_read_value(uint8_t reg){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	I2C1_BrustRead(DEVICE_ADDR, reg, 6, (char*)data_rec);
 80008c6:	79f9      	ldrb	r1, [r7, #7]
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <adx1_read_value+0x20>)
 80008ca:	2206      	movs	r2, #6
 80008cc:	2053      	movs	r0, #83	; 0x53
 80008ce:	f000 f869 	bl	80009a4 <I2C1_BrustRead>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000001c 	.word	0x2000001c

080008e0 <I2C1_BrustWrite>:

void I2C1_BrustWrite(char saddr, char maddr, int n, char* data){
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4603      	mov	r3, r0
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	460b      	mov	r3, r1
 80008f0:	73bb      	strb	r3, [r7, #14]

	volatile int tmp;

	//Wait Until Bus is not busy
	while(I2C1->SR2 & (SR2_BUSY)){}
 80008f2:	bf00      	nop
 80008f4:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1f9      	bne.n	80008f4 <I2C1_BrustWrite+0x14>

	//Generate Start Condition
	I2C1->CR1 |= CR1_START;
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a26      	ldr	r2, [pc, #152]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090a:	6013      	str	r3, [r2, #0]

	//Wait until the Start Flag is set
	while(!(I2C1->SR1 & (SR1_SB))){}
 800090c:	bf00      	nop
 800090e:	4b24      	ldr	r3, [pc, #144]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f9      	beq.n	800090e <I2C1_BrustWrite+0x2e>

	//Transmit Slave address +write (0)
	I2C1->DR = saddr<<1;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	005a      	lsls	r2, r3, #1
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000920:	611a      	str	r2, [r3, #16]

	//Wait until the Address Flag is set
	while(!(I2C1->SR1 & (SR1_ADDR))){}
 8000922:	bf00      	nop
 8000924:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	f003 0302 	and.w	r3, r3, #2
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f9      	beq.n	8000924 <I2C1_BrustWrite+0x44>

	//Clear the Address Flag
	tmp = I2C1->SR2;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	613b      	str	r3, [r7, #16]

	//Send memory address
	I2C1->DR = maddr;
 8000936:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000938:	7bbb      	ldrb	r3, [r7, #14]
 800093a:	6113      	str	r3, [r2, #16]

	//Wait until the transmitter is empty
	while(!(I2C1->SR1 & (SR1_TXE))){}
 800093c:	bf00      	nop
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f9      	beq.n	800093e <I2C1_BrustWrite+0x5e>

	for(int i=0; i<n;i++){
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	e01c      	b.n	800098a <I2C1_BrustWrite+0xaa>
		//Wait until the transmitter is empty
		while(!(I2C1->SR1 & (SR1_TXE))){}
 8000950:	bf00      	nop
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095a:	2b00      	cmp	r3, #0
 800095c:	d0f9      	beq.n	8000952 <I2C1_BrustWrite+0x72>
		I2C1->DR = *data++;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 8000968:	611a      	str	r2, [r3, #16]

		//Generate stop after data receive
		while(!(I2C1->SR1 & (SR1_BTF))){}
 800096a:	bf00      	nop
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 800096e:	695b      	ldr	r3, [r3, #20]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	2b00      	cmp	r3, #0
 8000976:	d0f9      	beq.n	800096c <I2C1_BrustWrite+0x8c>
		//Generate Stop
		I2C1->CR1 |= CR1_STOP;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <I2C1_BrustWrite+0xc0>)
 800097e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000982:	6013      	str	r3, [r2, #0]
	for(int i=0; i<n;i++){
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	429a      	cmp	r2, r3
 8000990:	dbde      	blt.n	8000950 <I2C1_BrustWrite+0x70>
	}
}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	371c      	adds	r7, #28
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40005400 	.word	0x40005400

080009a4 <I2C1_BrustRead>:

void I2C1_BrustRead(char saddr, char maddr, int n, char* data){
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60ba      	str	r2, [r7, #8]
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4603      	mov	r3, r0
 80009b0:	73fb      	strb	r3, [r7, #15]
 80009b2:	460b      	mov	r3, r1
 80009b4:	73bb      	strb	r3, [r7, #14]

	volatile int tmp;

	//Wait Until Bus is not busy
	while(I2C1->SR2 & (SR2_BUSY)){}
 80009b6:	bf00      	nop
 80009b8:	4b43      	ldr	r3, [pc, #268]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0302 	and.w	r3, r3, #2
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f9      	bne.n	80009b8 <I2C1_BrustRead+0x14>

	//Generate Start Condition
	I2C1->CR1 |= CR1_START;
 80009c4:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a3f      	ldr	r2, [pc, #252]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ce:	6013      	str	r3, [r2, #0]

	//Wait until the Start Flag is set
	while(!(I2C1->SR1 & (SR1_SB))){}
 80009d0:	bf00      	nop
 80009d2:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f9      	beq.n	80009d2 <I2C1_BrustRead+0x2e>

	//Transmit Slave address +write (0)
	I2C1->DR = saddr<<1;
 80009de:	7bfb      	ldrb	r3, [r7, #15]
 80009e0:	005a      	lsls	r2, r3, #1
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009e4:	611a      	str	r2, [r3, #16]

	//Wait until the Address Flag is set
	while(!(I2C1->SR1 & (SR1_ADDR))){}
 80009e6:	bf00      	nop
 80009e8:	4b37      	ldr	r3, [pc, #220]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f9      	beq.n	80009e8 <I2C1_BrustRead+0x44>

	//Clear the Address Flag
	tmp = I2C1->SR2;
 80009f4:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	617b      	str	r3, [r7, #20]

	//Wait until the transmitter is empty
	while(!(I2C1->SR1 & (SR1_TXE))){}
 80009fa:	bf00      	nop
 80009fc:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <I2C1_BrustRead+0x124>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f9      	beq.n	80009fc <I2C1_BrustRead+0x58>

	//Send memory address
	I2C1->DR = maddr;
 8000a08:	4a2f      	ldr	r2, [pc, #188]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	6113      	str	r3, [r2, #16]

	//Wait until the transmitter is empty
	while(!(I2C1->SR1 & (SR1_TXE))){}
 8000a0e:	bf00      	nop
 8000a10:	4b2d      	ldr	r3, [pc, #180]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0f9      	beq.n	8000a10 <I2C1_BrustRead+0x6c>

	//Generate Restart
	I2C1->CR1 |= CR1_START;
 8000a1c:	4b2a      	ldr	r3, [pc, #168]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	6013      	str	r3, [r2, #0]

	//Wait until the Address Flag is set
	while(!(I2C1->SR1 & (SR1_SB))){}
 8000a28:	bf00      	nop
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0f9      	beq.n	8000a2a <I2C1_BrustRead+0x86>

	//Transmit Slave address +Read (1)
	I2C1->DR = saddr<<1;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	005a      	lsls	r2, r3, #1
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a3c:	611a      	str	r2, [r3, #16]

	//Wait until the Address Flag is set
	while(!(I2C1->SR1 & (SR1_ADDR))){}
 8000a3e:	bf00      	nop
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d0f9      	beq.n	8000a40 <I2C1_BrustRead+0x9c>

	//Clear the Address Flag
	tmp = I2C1->SR2;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	617b      	str	r3, [r7, #20]

	//Enable Acknowledgment
	I2C1->CR1 |= CR1_ACK;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5c:	6013      	str	r3, [r2, #0]

	while(n > 0U){
 8000a5e:	e028      	b.n	8000ab2 <I2C1_BrustRead+0x10e>
		if(n==1U){
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d114      	bne.n	8000a90 <I2C1_BrustRead+0xec>
			//Generate Stop
			I2C1->CR1 |= CR1_STOP;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a70:	6013      	str	r3, [r2, #0]

			//Wait Until RXNE Flag is Set
			while(!(I2C1->SR1 & (SR1_RXNE))){}
 8000a72:	bf00      	nop
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0f9      	beq.n	8000a74 <I2C1_BrustRead+0xd0>

			//Read data from Data Register
			*data++ = I2C1->DR;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a82:	6919      	ldr	r1, [r3, #16]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	b2ca      	uxtb	r2, r1
 8000a8c:	701a      	strb	r2, [r3, #0]

			break;
 8000a8e:	e014      	b.n	8000aba <I2C1_BrustRead+0x116>
		}
		else {
			//Wait Until RXNE Flag is Set
			while(!(I2C1->SR1 & (SR1_RXNE))){}
 8000a90:	bf00      	nop
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <I2C1_BrustRead+0xee>

			//Read data from Data Register
			*data++ = I2C1->DR;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <I2C1_BrustRead+0x124>)
 8000aa0:	6919      	ldr	r1, [r3, #16]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	b2ca      	uxtb	r2, r1
 8000aaa:	701a      	strb	r2, [r3, #0]

			n--;
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
	while(n > 0U){
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1d3      	bne.n	8000a60 <I2C1_BrustRead+0xbc>
		}
	}
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	371c      	adds	r7, #28
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40005400 	.word	0x40005400

08000acc <I2C1_ByteRead>:


void I2C1_ByteRead(char saddr, char maddr, char* data){
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	603a      	str	r2, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	71bb      	strb	r3, [r7, #6]

	volatile int tmp;

	//Wait Until Bus is not busy
	while(I2C1->SR2 & (SR2_BUSY)){}
 8000adc:	bf00      	nop
 8000ade:	4b33      	ldr	r3, [pc, #204]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f003 0302 	and.w	r3, r3, #2
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1f9      	bne.n	8000ade <I2C1_ByteRead+0x12>

	//Generate Start Condition
	I2C1->CR1 |= CR1_START;
 8000aea:	4b30      	ldr	r3, [pc, #192]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af4:	6013      	str	r3, [r2, #0]

	//Wait until the Start Flag is set
	while(!(I2C1->SR1 & (SR1_SB))){}
 8000af6:	bf00      	nop
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f9      	beq.n	8000af8 <I2C1_ByteRead+0x2c>

	//Transmit Slave address +write (0)
	I2C1->DR = saddr<<1;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	005a      	lsls	r2, r3, #1
 8000b08:	4b28      	ldr	r3, [pc, #160]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b0a:	611a      	str	r2, [r3, #16]

	//Wait until the Address Flag is set
	while(!(I2C1->SR1 & (SR1_ADDR))){}
 8000b0c:	bf00      	nop
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f9      	beq.n	8000b0e <I2C1_ByteRead+0x42>

	//Clear the Address Flag
	tmp = I2C1->SR2;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	60fb      	str	r3, [r7, #12]

	//Send memory address
	I2C1->DR = maddr;
 8000b20:	4a22      	ldr	r2, [pc, #136]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	6113      	str	r3, [r2, #16]

	//Wait until the transmitter is empty
	while(!(I2C1->SR1 & (SR1_TXE))){}
 8000b26:	bf00      	nop
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f9      	beq.n	8000b28 <I2C1_ByteRead+0x5c>

	//Generate Restart
	I2C1->CR1 |= CR1_START;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1c      	ldr	r2, [pc, #112]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3e:	6013      	str	r3, [r2, #0]

	//Wait until the Start Flag is set
	while(!(I2C1->SR1 & (SR1_SB))){}
 8000b40:	bf00      	nop
 8000b42:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d0f9      	beq.n	8000b42 <I2C1_ByteRead+0x76>

	//Transmit Slave address +Read (1)
	I2C1->DR = saddr<<1;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	005a      	lsls	r2, r3, #1
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b54:	611a      	str	r2, [r3, #16]

	//Wait until the Address Flag is set
	while(!(I2C1->SR1 & (SR1_ADDR))){}
 8000b56:	bf00      	nop
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f003 0302 	and.w	r3, r3, #2
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f9      	beq.n	8000b58 <I2C1_ByteRead+0x8c>

	//Disable Acknowledgment
	I2C1->CR1 &= ~(CR1_ACK);
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a10      	ldr	r2, [pc, #64]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b6e:	6013      	str	r3, [r2, #0]

	//Clear the Address Flag
	tmp = I2C1->SR2;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	60fb      	str	r3, [r7, #12]

	//Generate Stop
	I2C1->CR1 |= CR1_STOP;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b80:	6013      	str	r3, [r2, #0]

	//Wait Until RXNE Flag is Set
	while(!(I2C1->SR1 & (SR1_RXNE))){}
 8000b82:	bf00      	nop
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0f9      	beq.n	8000b84 <I2C1_ByteRead+0xb8>

	//Read data from Data Register
	*data++ = I2C1->DR;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <I2C1_ByteRead+0xe0>)
 8000b92:	6919      	ldr	r1, [r3, #16]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	603a      	str	r2, [r7, #0]
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40005400 	.word	0x40005400

08000bb0 <I2C1_Init>:

void I2C1_Init(void){
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
//	1) Enable the clock access to PORT B -12C1
	RCC->AHB1ENR |= GPIOBEN;
 8000bb4:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <I2C1_Init+0x13c>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a4c      	ldr	r2, [pc, #304]	; (8000cec <I2C1_Init+0x13c>)
 8000bba:	f043 0302 	orr.w	r3, r3, #2
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
//	RCC->AHB1ENR |= (1U<<1);
	RCC->APB1ENR |= (1U<<21);
 8000bc0:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <I2C1_Init+0x13c>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a49      	ldr	r2, [pc, #292]	; (8000cec <I2C1_Init+0x13c>)
 8000bc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40

//	2) SET PB8 AND PB9 to alternate function
	GPIOB->MODER &= ~(1U<<16); //to set zero
 8000bcc:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <I2C1_Init+0x140>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a47      	ldr	r2, [pc, #284]	; (8000cf0 <I2C1_Init+0x140>)
 8000bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17); //to set one
 8000bd8:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <I2C1_Init+0x140>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a44      	ldr	r2, [pc, #272]	; (8000cf0 <I2C1_Init+0x140>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<18); //to set zero
 8000be4:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <I2C1_Init+0x140>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a41      	ldr	r2, [pc, #260]	; (8000cf0 <I2C1_Init+0x140>)
 8000bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19); //to set one
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <I2C1_Init+0x140>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a3e      	ldr	r2, [pc, #248]	; (8000cf0 <I2C1_Init+0x140>)
 8000bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bfa:	6013      	str	r3, [r2, #0]

//	3) SET OUTPUTTYPE as OPEN DRAIN
	GPIOB->OTYPER |= (1U<<8);
 8000bfc:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <I2C1_Init+0x140>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a3b      	ldr	r2, [pc, #236]	; (8000cf0 <I2C1_Init+0x140>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8000c08:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <I2C1_Init+0x140>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	4a38      	ldr	r2, [pc, #224]	; (8000cf0 <I2C1_Init+0x140>)
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c12:	6053      	str	r3, [r2, #4]

//	4) SET Internal PULLUP FOR BOTH
	GPIOB->PUPDR |= (1U<<16); //to set zero
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <I2C1_Init+0x140>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4a35      	ldr	r2, [pc, #212]	; (8000cf0 <I2C1_Init+0x140>)
 8000c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<17); //to set one
 8000c20:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <I2C1_Init+0x140>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a32      	ldr	r2, [pc, #200]	; (8000cf0 <I2C1_Init+0x140>)
 8000c26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c2a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<18); //to set zero
 8000c2c:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <I2C1_Init+0x140>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	4a2f      	ldr	r2, [pc, #188]	; (8000cf0 <I2C1_Init+0x140>)
 8000c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c36:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<19); //to set one
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <I2C1_Init+0x140>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4a2c      	ldr	r2, [pc, #176]	; (8000cf0 <I2C1_Init+0x140>)
 8000c3e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c42:	60d3      	str	r3, [r2, #12]

//	5) SET THE ALTERNATE FUNCTION TYPE FOR I2C
	GPIOB->AFR[1] &= ~(1U<<0);
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <I2C1_Init+0x140>)
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <I2C1_Init+0x140>)
 8000c4a:	f023 0301 	bic.w	r3, r3, #1
 8000c4e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<1);
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <I2C1_Init+0x140>)
 8000c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <I2C1_Init+0x140>)
 8000c56:	f023 0302 	bic.w	r3, r3, #2
 8000c5a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<2);
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <I2C1_Init+0x140>)
 8000c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c60:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <I2C1_Init+0x140>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<3);
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <I2C1_Init+0x140>)
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6c:	4a20      	ldr	r2, [pc, #128]	; (8000cf0 <I2C1_Init+0x140>)
 8000c6e:	f023 0308 	bic.w	r3, r3, #8
 8000c72:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<4);
 8000c74:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <I2C1_Init+0x140>)
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <I2C1_Init+0x140>)
 8000c7a:	f023 0310 	bic.w	r3, r3, #16
 8000c7e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<5);
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <I2C1_Init+0x140>)
 8000c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <I2C1_Init+0x140>)
 8000c86:	f023 0301 	bic.w	r3, r3, #1
 8000c8a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<6);
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <I2C1_Init+0x140>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <I2C1_Init+0x140>)
 8000c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c96:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<7);
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <I2C1_Init+0x140>)
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <I2C1_Init+0x140>)
 8000c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ca2:	6253      	str	r3, [r2, #36]	; 0x24

//	6) ENTER TO RESET MODE
	I2C1->CR1 |= (1U<<15);
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <I2C1_Init+0x144>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <I2C1_Init+0x144>)
 8000caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cae:	6013      	str	r3, [r2, #0]

//	7) COME OUR OF THE RESET MODE
	I2C1->CR1 &= ~(1U<<15);
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <I2C1_Init+0x144>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <I2C1_Init+0x144>)
 8000cb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cba:	6013      	str	r3, [r2, #0]

//	8) Set the Peripheral Clock Frequency(16 mhz)
	I2C1->CR2 |= (1U<<4);
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <I2C1_Init+0x144>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <I2C1_Init+0x144>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6053      	str	r3, [r2, #4]

//	9)Set the Standard Mode (12C_100KHZ)
	I2C1->CCR = I2C_100KHZ;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <I2C1_Init+0x144>)
 8000cca:	2250      	movs	r2, #80	; 0x50
 8000ccc:	61da      	str	r2, [r3, #28]
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <I2C1_Init+0x144>)
 8000cd0:	2211      	movs	r2, #17
 8000cd2:	621a      	str	r2, [r3, #32]

	//Enable I2C1
	I2C1->CR1 |= (1U<<0); //for peripheral enable
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <I2C1_Init+0x144>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <I2C1_Init+0x144>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40005400 	.word	0x40005400

08000cf8 <main>:

int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	adxl_init();
 8000cfc:	f7ff fda2 	bl	8000844 <adxl_init>
	while(1){
		adx1_read_value(DATA_START_ADDR);
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f7ff fddb 	bl	80008bc <adx1_read_value>
		x = ((data_rec[1]<<8) | data_rec[0]);
 8000d06:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <main+0xd8>)
 8000d08:	785b      	ldrb	r3, [r3, #1]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b30      	ldr	r3, [pc, #192]	; (8000dd0 <main+0xd8>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <main+0xdc>)
 8000d1c:	801a      	strh	r2, [r3, #0]
		y = ((data_rec[3]<<8) | data_rec[2]);
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <main+0xd8>)
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <main+0xd8>)
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b29      	ldr	r3, [pc, #164]	; (8000dd8 <main+0xe0>)
 8000d34:	801a      	strh	r2, [r3, #0]
		z = ((data_rec[5]<<8) | data_rec[4]);
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <main+0xd8>)
 8000d38:	795b      	ldrb	r3, [r3, #5]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <main+0xd8>)
 8000d40:	791b      	ldrb	r3, [r3, #4]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <main+0xe4>)
 8000d4c:	801a      	strh	r2, [r3, #0]

		xg = (x*0.0078);
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <main+0xdc>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fcbc 	bl	80006d0 <__aeabi_i2d>
 8000d58:	a31b      	add	r3, pc, #108	; (adr r3, 8000dc8 <main+0xd0>)
 8000d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5e:	f7ff fa3b 	bl	80001d8 <__aeabi_dmul>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fd1b 	bl	80007a4 <__aeabi_d2f>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <main+0xe8>)
 8000d72:	6013      	str	r3, [r2, #0]
		yg = (y*0.0078);
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <main+0xe0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fca9 	bl	80006d0 <__aeabi_i2d>
 8000d7e:	a312      	add	r3, pc, #72	; (adr r3, 8000dc8 <main+0xd0>)
 8000d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d84:	f7ff fa28 	bl	80001d8 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fd08 	bl	80007a4 <__aeabi_d2f>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <main+0xec>)
 8000d98:	6013      	str	r3, [r2, #0]
		zg = (z*0.0078);
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <main+0xe4>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fc96 	bl	80006d0 <__aeabi_i2d>
 8000da4:	a308      	add	r3, pc, #32	; (adr r3, 8000dc8 <main+0xd0>)
 8000da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000daa:	f7ff fa15 	bl	80001d8 <__aeabi_dmul>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f7ff fcf5 	bl	80007a4 <__aeabi_d2f>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <main+0xf0>)
 8000dbe:	6013      	str	r3, [r2, #0]
		adx1_read_value(DATA_START_ADDR);
 8000dc0:	e79e      	b.n	8000d00 <main+0x8>
 8000dc2:	bf00      	nop
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	8e8a71de 	.word	0x8e8a71de
 8000dcc:	3f7ff2e4 	.word	0x3f7ff2e4
 8000dd0:	2000001c 	.word	0x2000001c
 8000dd4:	20000022 	.word	0x20000022
 8000dd8:	20000024 	.word	0x20000024
 8000ddc:	20000026 	.word	0x20000026
 8000de0:	20000028 	.word	0x20000028
 8000de4:	2000002c 	.word	0x2000002c
 8000de8:	20000030 	.word	0x20000030

08000dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <LoopForever+0xe>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	; (8000e38 <LoopForever+0x16>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1a:	f000 f811 	bl	8000e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff ff6b 	bl	8000cf8 <main>

08000e22 <LoopForever>:

LoopForever:
  b LoopForever
 8000e22:	e7fe      	b.n	8000e22 <LoopForever>
  ldr   r0, =_estack
 8000e24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e30:	08000ea8 	.word	0x08000ea8
  ldr r2, =_sbss
 8000e34:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e38:	20000038 	.word	0x20000038

08000e3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <__libc_init_array>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	4d0d      	ldr	r5, [pc, #52]	; (8000e78 <__libc_init_array+0x38>)
 8000e44:	4c0d      	ldr	r4, [pc, #52]	; (8000e7c <__libc_init_array+0x3c>)
 8000e46:	1b64      	subs	r4, r4, r5
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	42a6      	cmp	r6, r4
 8000e4e:	d109      	bne.n	8000e64 <__libc_init_array+0x24>
 8000e50:	4d0b      	ldr	r5, [pc, #44]	; (8000e80 <__libc_init_array+0x40>)
 8000e52:	4c0c      	ldr	r4, [pc, #48]	; (8000e84 <__libc_init_array+0x44>)
 8000e54:	f000 f818 	bl	8000e88 <_init>
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	42a6      	cmp	r6, r4
 8000e60:	d105      	bne.n	8000e6e <__libc_init_array+0x2e>
 8000e62:	bd70      	pop	{r4, r5, r6, pc}
 8000e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e68:	4798      	blx	r3
 8000e6a:	3601      	adds	r6, #1
 8000e6c:	e7ee      	b.n	8000e4c <__libc_init_array+0xc>
 8000e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e72:	4798      	blx	r3
 8000e74:	3601      	adds	r6, #1
 8000e76:	e7f2      	b.n	8000e5e <__libc_init_array+0x1e>
 8000e78:	08000ea0 	.word	0x08000ea0
 8000e7c:	08000ea0 	.word	0x08000ea0
 8000e80:	08000ea0 	.word	0x08000ea0
 8000e84:	08000ea4 	.word	0x08000ea4

08000e88 <_init>:
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	bf00      	nop
 8000e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8e:	bc08      	pop	{r3}
 8000e90:	469e      	mov	lr, r3
 8000e92:	4770      	bx	lr

08000e94 <_fini>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	bf00      	nop
 8000e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9a:	bc08      	pop	{r3}
 8000e9c:	469e      	mov	lr, r3
 8000e9e:	4770      	bx	lr
